(* Tp01 Chris Foulon && Maxime Michotte *)

exception NotTh of string;;
(*DÃ©finition des types*)

type proposition = 
  | True
  | False
  | NON of proposition
  | OU of proposition * proposition
  | ET of proposition * proposition
  | IMP of proposition * proposition
  | EQUI of proposition * proposition
  | SYMBOLE of string;;

(*fonction d'affichage*)
let affichage proposition = 
  let rec aux prop =  
    match prop with
    | True -> "vrai"
    | False -> "false"
    | NON x -> "non " ^ (aux x)
    | OU (x,y) -> "(" ^ (aux x)  ^ " ou " ^ (aux y) ^ ")"
    | ET (x,y) -> "(" ^ (aux x)  ^ " et " ^ (aux y) ^ ")"
    | IMP (x,y) -> "(" ^ (aux x)  ^ " => " ^ (aux y) ^ ")"
    | EQUI (x,y) -> "(" ^ (aux x)  ^ " <=> " ^ (aux y) ^ ")"
    | SYMBOLE x -> x
  in aux proposition
;;

let value2 argument liste= 
  let rec aux arg list= 
    match list with
    | [] -> failwith "La liste ne contient pas l'argument"
    | (x,y) :: listp when x=arg -> if y == true then "vrai" else "faux"
    | (x,y) :: listp -> (aux arg listp)
  in (aux argument liste) 
;;

let affichage2 proposition liste = 
  let rec aux prop list =  
    match (prop,list) with
    | ((NON x),list) -> "non " ^ (aux x list)
    | ((OU (x,y)),list) -> "(" ^ (aux x list)  ^ " ou " ^ (aux y list) ^ ")"
    | ((ET (x,y)),list) -> "(" ^ (aux x list)  ^ " et " ^ (aux y list) ^ ")"
    | ((IMP (x,y)),list) -> "(" ^ (aux x list)  ^ " => " ^ (aux y list) ^ ")"
    | ((EQUI (x,y)),list) -> "(" ^ (aux x list)  ^ " <=> " ^ (aux y list) ^ ")"
    | ((SYMBOLE x),list) -> value2 x list
  in print_endline(aux proposition liste)
;;

let value argument liste= 
  let rec aux arg list= 
    match list with
    | [] -> failwith "La liste ne contient pas l'argument"
    | (x,y) :: listp when x = arg -> y
    | (x,y) :: listp -> aux arg listp
  in aux argument liste
;;

value "B" [("A",true);("B",false)];;

let evaluation proposition liste = 
  let rec aux prop =  
    match prop with
    | True -> true
    | False -> false
    | NON x -> not(aux x)
    | OU (x,y) -> (aux x)||(aux y)
    | ET (x,y) -> (aux x)&&(aux y)
    | IMP (x,y) -> not(aux x)||(aux y)
    | EQUI (x,y) -> (aux x)==(aux y)
    | SYMBOLE x -> value x liste
  in aux proposition
;;

evaluation (OU(SYMBOLE "C", NON(OU(SYMBOLE "A", SYMBOLE "B")))) [("A", true) ; ("B", false)
; ("C", false)];;


let rec estdans x list = 
  match list with
  | [] -> false 
  | e::ll when e = x -> true
  | e::ll -> estdans x ll
;; 

let supdoublon lst =
  let rec aux l1 l2 = 
  match l1 with 
  | [] -> l2 
  | e::ll when not(estdans e ll) -> aux ll (e::l2)
  | e::ll -> aux ll l2
  in aux lst []
;;

let listesymb prop = 
  let rec aux prop lst = 
    match prop with 
    | NON x -> aux x lst
    | OU (x,y) -> (aux x lst)@(aux y lst)
    | ET (x,y) -> (aux x lst)@(aux y lst)
    | IMP (x,y) -> (aux x lst)@(aux y lst)
    | EQUI (x,y) -> (aux x lst)@(aux y lst)
    | SYMBOLE x -> [x]@lst
    | _ -> lst
  in supdoublon(aux prop [])
;;


let print_liaison lst = 
  match lst with 
  |[] -> "\n"
  |_ -> 
    let rec aux l1 str = 
      match l1 with 
      | [] -> str 
      | (e, b)::ll when (b = true) -> aux ll (e ^ " est vraie\n" ^ str)
      | (e, b)::ll -> aux ll (e ^ " est fausse\n" ^ str) 
    in " quand \n" ^ (aux lst "")
;;

let prop_to_string proposition = 
  let rec aux prop =  
    match prop with
    | NON x -> "non " ^ (aux x)
    | OU (x,y) -> "(" ^ (aux x)  ^ " ou " ^ (aux y) ^ ")"
    | ET (x,y) -> "(" ^ (aux x)  ^ " et " ^ (aux y) ^ ")"
    | IMP (x,y) -> "(" ^ (aux x)  ^ " => " ^ (aux y) ^ ")"
    | EQUI (x,y) -> "(" ^ (aux x)  ^ " <=> " ^ (aux y) ^ ")"
    | SYMBOLE x -> x
  in aux proposition
;; 

let tauto prop = 
  let rec aux prop ll ls = 
    match ls with 
    | [] when (evaluation prop ll) = false -> raise (NotTh ((prop_to_string prop) ^ 
      (" n'est pas un theoreme car la proposition est fausse \n") ^
      (print_liaison ll)))
    | [] -> true
    | e::ls1 -> (aux prop ((e, true)::ll) ls1) && (aux prop ((e, false)::ll) ls1)
  in aux prop [] (listesymb prop)
;;

let rendu proposition liste=
  match (proposition,liste) with
  | (proposition,liste) when (evaluation proposition liste)==true -> (print_endline("Theoreme:")); (affichage2 proposition liste)
  | (proposition,liste) -> (affichage2 proposition liste);(print_endline("n'est pas un theoreme, car la proposition est tout le temps fausse."))
  | (proposition,[]) when (tauto proposition liste)==true -> print_endline("Theoreme: pour toute proposition ")^(listesymb proposition)^(affichage proposition)
;;

let liste_to_string lst =
  let rec aux l str = 
    match l with 
    | [] -> str
    | e::ll -> aux ll e^ ", " ^ str
  in aux lst ""
;; 


let print_tauto prop =
    try 
    if ((tauto prop) = true) then
      ("Theoreme : " ^ "pour toute proposition " ^ (liste_to_string (listesymb prop)) ^ "\n"  ^ (prop_to_string prop) ^ "\n")
    else
      ""
    with NotTh str -> str;;

let rendu proposition liste =
  match (proposition, liste) with
  | (proposition, []) -> print_string(print_tauto proposition)
  | (proposition,liste) when (evaluation proposition liste)==true -> (print_string("Theoreme:")); (affichage2 proposition liste)
  | (proposition,liste) -> (affichage2 proposition liste); print_endline("n'est pas un theoreme, car la proposition est tout le temps fausse.")
;;

let p1 = (OU(SYMBOLE "C", NON(OU(SYMBOLE "A", SYMBOLE "B"))));;

tauto p1;;

(*estdans "C" ["A" ; "C"];;

supdoublon ["A" ; "A"];;

listesymb p1;;

rendu p1 [];;

let p2 = IMP(SYMBOLE "A", SYMBOLE "A");;
 
rendu p2 [];;

(*exemples du sujet *)

let tp1 = IMP(SYMBOLE "A", SYMBOLE "B");;

rendu tp1 [("A", false) ; ("B", true)];;

let tp2 = OU(SYMBOLE "P", NON(SYMBOLE "P"));;

rendu tp2 [];;

let tp3 = EQUI(NON(ET(SYMBOLE "p",SYMBOLE "q")) , OU(NON (SYMBOLE "p"), NON (SYMBOLE "q")));;

rendu tp3 [];;

let tp4 = IMP(SYMBOLE "A", SYMBOLE "B");;

rendu tp4 [("A", true) ; ("B", false)];;

let tp5 = EQUI((IMP(IMP(SYMBOLE "p", SYMBOLE "q"), SYMBOLE "r")),(IMP(SYMBOLE "p", IMP(SYMBOLE "q", SYMBOLE "r"))));;

rendu tp5 [];;
*)
